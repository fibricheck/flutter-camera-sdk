{
  "id": "6NSVH",
  "name": "Check if a component is renderd",
  "type": "manual",
  "tier": "System - Smoke",
  "planStatus": "Planned",
  "motivation": "",
  "testSteps": [
    "Import camera component",
    "Provide camera permissions",
    "Try to render the compenent with this snippet: \n```\n @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        backgroundColor: FCColors.brokenWhite,\n        appBar: AppBar(\n          backgroundColor: FCColors.green,\n          title: const Text('Fibricheck example app'),\n        ),\n        body: Column(\n          children: [\n            Expanded(\n              child: FutureBuilder(\n                future: _requestCameraPermission,\n                builder: (context, snapshot) {\n                  return Column(\n                    children: [\n                      DemoTitleWidget(title: _status),\n                      Container(\n                        decoration: const BoxDecoration(\n                          border: Border(\n                            top: BorderSide(color: FCColors.lightGray, width: 1),\n                            bottom: BorderSide(color: FCColors.lightGray, width: 1),\n                          ),\n                        ),\n                        height: 200,\n                        child: FibriCheckView(\n                          fibriCheckViewProperties: FibriCheckViewProperties(\n                            flashEnabled: true,\n                            lineThickness: 4,\n                          ),\n                          onCalibrationReady: () => {\n                            debugPrint(\"Flutter onCalibrationReady\"),\n                            setState(() {\n                              _status = \"Recording heartbeat...\";\n                            }),\n                          },\n                          onFingerDetected: () => {\n                            Wakelock.enable(),\n                            debugPrint(\"Flutter onFingerDetected\"),\n                            setState(() {\n                              _status = \"Detecting pulse...\";\n                            }),\n                          },\n                          onFingerDetectionTimeExpired: () => debugPrint(\"Flutter onFingerDetectionTimeExpired\"),\n                          onFingerRemoved: (y, v, stdDevY) => {\n                            Wakelock.disable(),\n                            debugPrint(\"Flutter onFingerRemoved $y, $v, $stdDevY\"),\n                          },\n                          onHeartBeat: (heartbeat) => {\n                            debugPrint(\"Flutter onHeartBeat $heartbeat\"),\n                            setState(() {\n                              _heartBeat = heartbeat.toString();\n                            }),\n                          },\n                          onMeasurementFinished: () => {\n                            debugPrint(\"Flutter onMeasurementFinished\"),\n                            setState(() {\n                              _status = \"Measurement finished!\";\n                            }),\n                          },\n                          onMeasurementProcessed: (measurement) => debugPrint(\"Flutter onMeasurementProcessed $measurement\"),\n                          onMeasurementStart: () => debugPrint(\"Flutter onMeasurementStart\"),\n                          onMovementDetected: () => debugPrint(\"Flutter onMovementDetected\"),\n                          onPulseDetected: () => {\n                            debugPrint(\"Flutter onPulseDetected\"),\n                            setState(() {\n                              _status = \"Calibrating...\";\n                            }),\n                          },\n                          onPulseDetectionTimeExpired: () => debugPrint(\"Flutter onPulseDetectionTimeExpired\"),\n                          onSampleReady: (ppg, raw) => {},\n                          //debugPrint(\"Flutter onSampleReady $ppg $raw\"), -> prints often. Only uncomment when data is relevant\n                          onTimeRemaining: (seconds) => {\n                            debugPrint(\"Flutter onTimeRemaining $seconds\"),\n                            setState(() {\n                              _timeRemaining = seconds.toString();\n                            }),\n                          },\n                          onMeasurementError: (message) => debugPrint(\"Flutter onMeasurementError: $message\"),\n                        ),\n                      ),\n                      DemoMetricsWidget(timeRemaining: _timeRemaining, heartBeat: _heartBeat),\n                    ],\n                  );\n                },\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n```"
  ],
  "expectedResult": "Component is rendered",
  "requiredTestEnvironmentIds": [],
  "keyValues": [],
  "parentNames": [
    "Execute a measurement",
    "Initialize a measurement",
    "Render component"
  ],
  "updatedTime": 1663759799547
}